import { createClient } from "redis";
import { envVar } from "./envConfig.js";

// Cria√ß√£o do cliente Redis
const redisClient = createClient({
  url: envVar.REDIS_URL, // URL da Redis,
  username: envVar.REDIS_USERNAME, // Nome do usu√°rio
  password: envVar.REDIS_PASSWORD, // Senha

  socket: {
    connectTimeout: 60000, // Tempo limite de conex√£o com o banco de dados (60s)
    reconnectStrategy: (retries) => Math.min(retries * 50, 500), // Como reconecta ap√≥s cair (espera 50ms, 100ms, ..., at√© 500ms)
  },
});

// Inicia a conex√£o
redisClient.on("connect", () => {
  console.log("üîÑÔ∏è [REDIS] Conectando ao servidor...");
});

// Conex√£o feita
redisClient.on("ready", () => {
  console.log("‚úÖ [REDIS] Cliente conectado");
});

// Erro de conex√£o
redisClient.on("error", (err: Error) => {
  console.log(`‚ùå [REDIS] Erro ao conectar cliente: ${err.message}`);
});

// Reconex√£o
redisClient.on("reconnecting", () => {
  console.log("üîÑÔ∏è [REDIS] Reconectando ao servidor...");
});

// Fun√ß√£o de teste
const testConnection = async (): Promise<void> => {
  await redisClient.ping(); // Envia um comando ping, respondendo pong

  // Comandos b√°sicos (SET, GET e DEL)
  await redisClient.set("test:connection", "WakuTaku conectado");
  await redisClient.get("test:connection");
  await redisClient.del("test:connection");
};

// Fun√ß√£o de conex√£o
export const connectToRedis = async (): Promise<void> => {
  try {
    // Verifica√ß√£o de conex√£o aberta
    if (!redisClient.isOpen) {
      await redisClient.connect(); // Conecta ao banco de dados
      await testConnection();
    }
  } catch (error) {
    console.error(`‚ùå [REDIS] Falha ao conectar com o Redis: ${error}`);
    throw error;
  }
};

// Fun√ß√£o de desconex√£o
export const disconnectFromRedis = async (): Promise<void> => {
  try {
    if (redisClient.isOpen) {
      await redisClient.quit(); // Desconecta esperando fun√ß√µes pendentes terminarem
    }
  } catch (error) {
    console.error(`‚ö†Ô∏è [REDIS] Falha ao desconectar do Redis: ${error}`);
  }
};

export { redisClient };
